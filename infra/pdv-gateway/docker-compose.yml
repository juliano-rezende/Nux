version: "3.9"

services:
  kong:
    image: kong:3.6
    container_name: kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yaml
      KONG_ADMIN_LISTEN: "0.0.0.0:${KONG_ADMIN_PORT}"
      KONG_PROXY_LISTEN: "0.0.0.0:${KONG_PROXY_PORT}, 0.0.0.0:${KONG_PROXY_SSL} ssl"
      KONG_LOG_LEVEL: notice
      KONG_PLUGINS: bundled
      KONG_NGINX_WORKER_PROCESSES: "auto"
    volumes:
      - ./kong/kong.yaml:/kong/declarative/kong.yaml:ro
    ports:
      - "${KONG_PROXY_PORT}:${KONG_PROXY_PORT}"
      - "${KONG_PROXY_SSL}:${KONG_PROXY_SSL}"
      - "${KONG_ADMIN_PORT}:${KONG_ADMIN_PORT}"
    depends_on:
      - prism
    networks:
      - kong-net

  konga-db:
    image: postgres:11-alpine
    container_name: konga-db
    command: ["postgres", "-c", "password_encryption=md5", "-c", "listen_addresses=*"]
    environment:
      POSTGRES_USER: ${KONGA_DB_USER}
      POSTGRES_PASSWORD: ${KONGA_DB_PASS}
      POSTGRES_DB: ${KONGA_DB_NAME}
    volumes:
      - konga_pg_data:/var/lib/postgresql/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1"]
      interval: 5s
      timeout: 3s
      retries: 20

  # One-shot para criar o schema do Konga (tabelas konga_*).
  konga-prepare:
    image: pantsel/konga:latest
    platform: linux/amd64          # necessário em Mac M1/M2
    container_name: konga-prepare
    command: ["-c","prepare","-a","postgres","-u","postgresql://konga:konga@konga-db:5432/konga"]
    depends_on:
      konga-db:
        condition: service_healthy
    restart: "no"
    networks:
      - kong-net

  konga:
    image: pantsel/konga:latest
    platform: linux/amd64          # necessário em Mac M1/M2
    container_name: konga
    environment:
      - NODE_ENV=production
      - DB_ADAPTER=postgres
      - DB_URI=postgres://konga:konga@konga-db:5432/konga
      - DB_PG_SCHEMA=public
      - KONGA_PORT=1337
    ports:
      - "1337:1337"
    depends_on:
      kong:
        condition: service_started
      konga-prepare:
        condition: service_completed_successfully
    networks:
      - kong-net
    # A Konga se conecta ao Kong pela Admin API (http://kong:8001)

  swagger:
    image: swaggerapi/swagger-ui:latest
    container_name: swagger
    environment:
      SWAGGER_JSON: /openapi/openapi.yaml
    volumes:
      - ./openapi/openapi.yaml:/openapi/openapi.yaml:ro
    ports:
      - "${SWAGGER_PORT}:8080"
    networks:
      - kong-net

  prism:
    image: stoplight/prism:4
    container_name: prism
    command: mock -h 0.0.0.0 /openapi/openapi.yaml
    volumes:
      - ./openapi/openapi.yaml:/openapi/openapi.yaml:ro
    ports:
      - "${PRISM_PORT}:4010"
    networks:
      - kong-net

networks:
  kong-net:

volumes:
  konga_pg_data:
